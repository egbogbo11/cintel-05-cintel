[{"name": "app.py", "content": "# --------------------------------------------\n# Imports at the top - PyShiny EXPRESS VERSION\n# --------------------------------------------\n\nfrom shiny import reactive, render\nfrom shiny.express import ui\nimport random\nfrom datetime import datetime\nfrom collections import deque\nimport pandas as pd\nimport plotly.express as px\nfrom shinywidgets import render_plotly\nfrom scipy import stats\nfrom faicons import icon_svg\n\n# --------------------------------------------\n# Constants\n# --------------------------------------------\n\nUPDATE_INTERVAL_SECS: int = 3\nDEQUE_SIZE: int = 5\nreactive_value_wrapper = reactive.value(deque(maxlen=DEQUE_SIZE))\n\n# --------------------------------------------\n# Reactive calc that updates every few seconds\n# --------------------------------------------\n\n@reactive.calc()\ndef reactive_calc_combined():\n    reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n\n    temp = round(random.uniform(-18, -16), 1)\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    new_dictionary_entry = {\"temp\": temp, \"timestamp\": timestamp}\n\n    reactive_value_wrapper.get().append(new_dictionary_entry)\n    deque_snapshot = reactive_value_wrapper.get()\n    df = pd.DataFrame(deque_snapshot)\n    latest_dictionary_entry = new_dictionary_entry\n\n    return deque_snapshot, df, latest_dictionary_entry\n\n# --------------------------------------------\n# UI Layout and Display\n# --------------------------------------------\n\nui.page_opts(title=\"PyShiny Express: Live Data Example\", fillable=True)\n\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Antarctic Explorer\", class_=\"text-center\")\n    ui.p(\n        \"A demonstration of real-time temperature readings in Antarctica.\",\n        class_=\"text-center\",\n    )\n    ui.hr()\n    ui.h6(\"Links:\")\n    ui.a(\n        \"GitHub Source\",\n        href=\"https://github.com/denisecase/cintel-05-cintel\",\n        target=\"_blank\",\n    )\n    ui.a(\n        \"GitHub App\",\n        href=\"https://denisecase.github.io/cintel-05-cintel/\",\n        target=\"_blank\",\n    )\n    ui.a(\"PyShiny\", href=\"https://shiny.posit.co/py/\", target=\"_blank\")\n    ui.a(\n        \"PyShiny Express\",\n        href=\"https://shiny.posit.co/blog/posts/shiny-express/\",\n        target=\"_blank\",\n    )\n\n# --------------------------------------------\n# Value Box for Current Temp with Styling\n# --------------------------------------------\n\nwith ui.layout_columns():\n    with ui.value_box(\n        showcase=icon_svg(\"snowflake\"),\n        theme=\"bg-gradient-cyan-blue\",\n    ):\n        \"Current Temperature\"\n\n        @render.text\n        def display_temp():\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n            return f\"{latest_dictionary_entry['temp']} \u00b0C\"\n\n        \"Live from Antarctica \ud83c\udf28\ufe0f\"\n\n# --------------------------------------------\n# Card for Date & Time Display\n# --------------------------------------------\n\nwith ui.card(full_screen=True):\n    ui.card_header(\"\ud83d\udd52 Current Date & Time\")\n\n    @render.text\n    def display_time():\n        deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n        return f\"{latest_dictionary_entry['timestamp']}\"\n\n# --------------------------------------------\n# Card for Most Recent Readings Table\n# --------------------------------------------\n\nwith ui.card():\n    ui.card_header(\"\ud83d\udccb Most Recent Readings\")\n\n    @render.data_frame\n    def display_df():\n        deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n        pd.set_option(\"display.width\", None)\n        return render.DataGrid(df, width=\"100%\")\n\n# --------------------------------------------\n# Card for Plot with Trend Line\n# --------------------------------------------\n\nwith ui.card():\n    ui.card_header(\"\ud83d\udcc8 Temperature Trend Over Time\")\n\n    @render_plotly\n    def display_plot():\n        deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n\n        if not df.empty:\n            df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\n            fig = px.scatter(\n                df,\n                x=\"timestamp\",\n                y=\"temp\",\n                title=\"\ud83d\udcc9 Temperature Readings with Trend Line\",\n                labels={\"temp\": \"Temperature (\u00b0C)\", \"timestamp\": \"Time\"},\n                color_discrete_sequence=[\"deepskyblue\"]\n            )\n\n            x_vals = list(range(len(df)))\n            y_vals = df[\"temp\"]\n            slope, intercept, _, _, _ = stats.linregress(x_vals, y_vals)\n            df[\"best_fit_line\"] = [slope * x + intercept for x in x_vals]\n\n            fig.add_scatter(\n                x=df[\"timestamp\"],\n                y=df[\"best_fit_line\"],\n                mode=\"lines\",\n                line=dict(color=\"lightgray\", dash=\"dot\"),\n                name=\"Regression Line\"\n            )\n\n            fig.update_layout(\n                xaxis_title=\"Time\",\n                yaxis_title=\"Temperature (\u00b0C)\",\n                template=\"plotly_dark\",\n                font=dict(family=\"Arial\", size=12),\n                plot_bgcolor=\"#1f2c56\",\n                paper_bgcolor=\"#1f2c56\",\n                title_font_size=18\n            )\n\n        return fig\n", "type": "text"}]